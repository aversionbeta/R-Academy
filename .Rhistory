library(ggplot2)
ggplot(data = diamonds)+
geom_bar(mapping = aes(x=cut))
?geom_bar
demo <- tribble(
~a, ~b,
"bar1",20,
"bar2",30,
"bar3",40
)
library(tibble)
demo <- tribble(
~a, ~b,
"bar1",20,
"bar2",30,
"bar3",40
)
ggplot(data = demo)+
geom_bar(mapping = aes(x=a, y=b), stat="identity")
ggplot(data = diamonds)+
stat_summary(
mapping = aes(x=cut, y=depth),
fun.ymax = max,
fun.ymin = min,
fun.y = median
)
ggplot(data = diamonds)+
geom_bar(mapping = aes(x=cut, color= cut))
ggplot(data = diamonds)+
geom_bar(mapping = aes(x=cut, fill= cut))
ggplot(data = diamonds)+
geom_bar(mapping = aes(x=cut, fill= clarity))
ggplot(data = diamonds)+
geom_bar(mapping = aes(x=cut, fill= clarity), position = fill)
ggplot(data = diamonds)+
geom_bar(mapping = aes(x=cut, fill= clarity), position = "fill")
ggplot(data = diamonds)+
geom_bar(mapping = aes(x=cut, fill= clarity), position = "dodge")
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy, color=manufacturer), position="jitter")
ggplot(data = mpg)+
geom_jitter(mapping = aes(x=displ, y=hwy))
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x=displ, y=hwy))
ggplot(data = mpg, mapping = aes(x=class, y=hwy))+
geom_boxplot()
ggplot(data = mpg, mapping = aes(x=class, y=hwy))+
geom_boxplot()+
coord_flip()
bar<- ggplot(data=diamonds)+
geom_bar(
mapping = aes(x=cut, fill=cut),
show.legend = FALSE,
width = 1
)+
theme(aspect.ratio = 1)+
labs(x=NULL,y=NULL)
bar+coord_flip()
bar+coord_polar()
bar+coord_flip()
bar+coord_polar()
ggplot(data = mpg, mapping = aes(x=cty, y=hwy))+
geom_point()+
geom_abline()+
coord_fixed()
ggplot(data = mpg, mapping = aes(x=cty, y=hwy))+
geom_point()+
coord_fixed()
pairs(SAP[,3:6])
select(flights, contains ("TIME"))
install.packages("nycflights13")
library(nycflights13)
select(flights, time_hour, day, carrier, everything())
(jan1 <- filter(flights, month == 1, day == 1))
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("ggplot")
select(flights, contains ("TIME"))
arrange(flights, arr_delay)
install.packages("ggplot2")
library(ggplot2)
view(flights)
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
airtime)
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance)
flights_sml <- select(flights,year:day,ends_with("delay"),distance)
flights_sml <- select(flights,year:day,ends_with("delay"),distance)
flights_sml
flights_sml <- select(flights,year:day,ends_with("delay"),distance, airtime)
?flights
flights_sml <- select(flights,year:day,ends_with("delay"),distance, air_time)
flights_sml
flights_sml <- select(flights,year:day,ends_with("delay"),distance, air_time)
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time*60)
flights_sml
flights_sml <- select(flights,year:day,ends_with("delay"),distance, air_time, gain, speed)
flights_sml <- select(flights,year:day,ends_with("delay"),distance, air_time)
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time*60)
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time*60,
gain_per_hour = gain / hours)
mutate(flights_sml,
gain = arr_delay - dep_delay,
hours = air_time/60,
gain_per_hour = gain / hours)
transmutate(flights_sml,
gain = arr_delay - dep_delay,
hours = air_time/60,
gain_per_hour = gain / hours)
transmute(flights_sml,
gain = arr_delay - dep_delay,
hours = air_time/60,
gain_per_hour = gain / hours)
transmute(flights,
dep_time,
dep_time %/% 100
dep_time %% 100)
transmute(flights,
dep_time,
dep_time %/% 100,
dep_time %% 100)
transmute(flights,
dep_time,
dep_time %/% 50,
dep_time %% 100)
transmute(flights,
dep_time,
dep_time %/% 500,
dep_time %% 100)
transmute(flights,
dep_time,
dep_time %/%100,
dep_time %% 100)
(x<- 1:10)
(x<- 1:10)
lag(x)
lead(x)
(x<- 1:10)
lag(x,2)
lead(x)
(x<- 1:10)
lag(x)
lag(x,2)
lead(x)
lead(x,2)
(x<- 1:10)
cumsum(x)
cummean(x)
cummin(x)
cummax(x)
cumprod(x)
y<- c(1,2,2,NA,3,4)
min_rank(y)
min_rank(y,desc(y))
min_rank(y)
min_rank(desc(y))
y<- c(1,2,2,NA,3,4)
min_rank(y)
min_rank(desc(y))
min_rank(y)
min_rank(desc(y))
row_number(y)
dense_rank(y)
percent_rank(y)
cume_dist(y)
ntile(y)
min_rank(y)
min_rank(desc(y))
row_number(y)
dense_rank(y)
percent_rank(y)
cume_dist(y)
(x<- 1:10 + 1:10)
x
